// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Identifies potential tax deductions from transaction data.
 *
 * - identifyTaxDeductions - A function that identifies potential tax deductions.
 * - IdentifyTaxDeductionsInput - The input type for the identifyTaxDeductions function.
 * - IdentifyTaxDeductionsOutput - The return type for the identifyTaxDeductions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const IdentifyTaxDeductionsInputSchema = z.object({
  transactionData: z
    .string()
    .describe('The transaction data to analyze, as a JSON string.'),
});
export type IdentifyTaxDeductionsInput = z.infer<typeof IdentifyTaxDeductionsInputSchema>;

const IdentifyTaxDeductionsOutputSchema = z.object({
  taxDeductions: z
    .string()
    .describe(
      'A JSON string containing an array of transactions that may be tax deductible, with a description of why they may be deductible.'
    ),
});
export type IdentifyTaxDeductionsOutput = z.infer<typeof IdentifyTaxDeductionsOutputSchema>;

export async function identifyTaxDeductions(
  input: IdentifyTaxDeductionsInput
): Promise<IdentifyTaxDeductionsOutput> {
  return identifyTaxDeductionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'identifyTaxDeductionsPrompt',
  input: {schema: IdentifyTaxDeductionsInputSchema},
  output: {schema: IdentifyTaxDeductionsOutputSchema},
  prompt: `You are an expert financial analyst specializing in tax deductions.

You will be provided with transaction data in JSON format. Analyze the data and identify any transactions that may be tax deductible.

Return a JSON string containing an array of transactions that may be tax deductible, with a description of why they may be deductible.

Transaction Data: {{{transactionData}}}`,
});

const identifyTaxDeductionsFlow = ai.defineFlow(
  {
    name: 'identifyTaxDeductionsFlow',
    inputSchema: IdentifyTaxDeductionsInputSchema,
    outputSchema: IdentifyTaxDeductionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
